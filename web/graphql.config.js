// @ts-check

// const Path = require('path')

const datoToken = process.env.NEXT_PUBLIC_DATOCMS_READONLY_TOKEN || 'INVALID'
const datoEnvironment = process.env.NEXT_PUBLIC_DATOCMS_ENVIRONMENT || null

const baseSchemaHeaders = {
  Authorization: datoToken,
  // We can use strict mode because we use Dato migrations
  // https://www.datocms.com/docs/content-delivery-api/api-endpoints#strict-mode-for-non-nullable-graphql-types
  'X-Exclude-Invalid': 'true'
}

const schemaHeaders = datoEnvironment
  ? {
      ...baseSchemaHeaders,
      'X-Environment': datoEnvironment
    }
  : baseSchemaHeaders

const baseSdkConfig = {
  avoidOptionals: {
    field: true
  },
  defaultScalarType: 'unknown',
  declarationKind: {
    interface: 'type'
  },
  disableDescriptions: true,
  enumsAsConst: true,
  flattenGeneratedTypes: false,
  immutableTypes: false,
  namingConvention: {
    enumValues: 'keep',
    transformUnderscore: true
  },
  noExport: false,
  nonOptionalTypename: true,
  onlyOperationTypes: false,
  preResolveTypes: true,
  pureMagicComment: true,
  skipTypename: false,
  useImplementingTypes: true,
  useTypeImports: true
}

const relayCompilerConfig = {
  flattenGeneratedTypes: true,
  skipDocumentValidation: true
}

/** @type { Record<string, string> } */
const datoScalars = {
  BooleanType: 'boolean',
  CustomData: 'unknown',
  Date: 'string',
  DateTime: 'string',
  FloatType: 'number',
  IntType: 'number',
  ItemId: 'string',
  JsonField: 'JSONValue',
  MetaTagAttributes: 'Record<string, string>',
  UploadId: 'string'
}

/** @type { string } */
const header = [
  '/* eslint-disable */',
  '/* DO NOT EDIT! Generated by GraphQL Codegen. */',
  '\n',
  'export type JSONValue = string | number | boolean | { [x: string]: JSONValue } | Array<JSONValue>;',
  '\n'
].join('\n')

const datoSchemaPath = './src/core/dato/sdk/schema.graphql'
const datoDocuments = ['./src/core/dato/sdk/queries/**/*.graphql']
const datoBlueprintPath = `./src/core/dato/sdk/blueprint.ts`
const datoBaseTypesPath = `./src/core/dato/base-types.ts`

/** @type { import('graphql-config').IGraphQLProjects } */
const config = {
  projects: {
    dato_sdk: {
      schemaPath: datoSchemaPath,
      includes: datoDocuments,
      extensions: {
        codegen: {
          generates: {
            [datoBaseTypesPath]: {
              schemaPath: datoSchemaPath,
              documents: datoDocuments,
              plugins: [
                'typescript',
                {
                  add: {
                    content: header,
                    placement: 'prepend'
                  }
                }
              ],
              config: {
                ...baseSdkConfig,
                scalars: datoScalars
              }
            },
            [datoBlueprintPath]: {
              schemaPath: datoSchemaPath,
              documents: datoDocuments,
              plugins: [
                'typescript',
                'typescript-operations',
                'typescript-generic-sdk',
                {
                  add: {
                    content: header,
                    placement: 'prepend'
                  }
                }
              ],
              config: {
                ...baseSdkConfig,
                ...relayCompilerConfig,
                scalars: datoScalars
              }
            },
            'src/': {
              schemaPath: datoSchemaPath,
              documents: datoDocuments,
              preset: 'near-operation-file',
              presetConfig: {
                extension: '.typegen.ts',
                baseTypesPath: './core/dato/base-types.ts'
              },
              plugins: [
                'typescript-operations',
                {
                  add: {
                    content: header,
                    placement: 'prepend'
                  }
                }
              ],
              config: {
                ...baseSdkConfig,
                scalars: datoScalars
              }
            }
          }
        }
      }
    },
    dato_schema: {
      schema: [
        {
          ['https://graphql.datocms.com/']: { headers: schemaHeaders }
        }
      ],
      extensions: {
        codegen: {
          generates: {
            [datoSchemaPath]: {
              plugins: ['schema-ast'],
              config: {
                commentDescriptions: false
              }
            }
          }
        }
      }
    }
  }
}

module.exports = config
