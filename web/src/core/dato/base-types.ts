/* eslint-disable */
/* DO NOT EDIT! Generated by GraphQL Codegen. */

export type JSONValue =
  | string
  | number
  | boolean
  | { [x: string]: JSONValue }
  | Array<JSONValue>

export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T
> = { [_ in K]?: never }
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never
    }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string }
  String: { input: string; output: string }
  Boolean: { input: boolean; output: boolean }
  Int: { input: number; output: number }
  Float: { input: number; output: number }
  BooleanType: { input: boolean; output: boolean }
  CustomData: { input: unknown; output: unknown }
  Date: { input: string; output: string }
  DateTime: { input: string; output: string }
  FloatType: { input: number; output: number }
  IntType: { input: number; output: number }
  ItemId: { input: string; output: string }
  JsonField: { input: JSONValue; output: JSONValue }
  MetaTagAttributes: {
    input: Record<string, string>
    output: Record<string, string>
  }
  UploadId: { input: string; output: string }
}

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['BooleanType']['input']>
}

export type CollectionMetadata = {
  __typename: 'CollectionMetadata'
  count: Scalars['IntType']['output']
}

export const ColorBucketType = {
  black: 'black',
  blue: 'blue',
  brown: 'brown',
  cyan: 'cyan',
  green: 'green',
  grey: 'grey',
  orange: 'orange',
  pink: 'pink',
  purple: 'purple',
  red: 'red',
  white: 'white',
  yellow: 'yellow'
} as const

export type ColorBucketType =
  (typeof ColorBucketType)[keyof typeof ColorBucketType]
export type ColorField = {
  __typename: 'ColorField'
  alpha: Scalars['IntType']['output']
  blue: Scalars['IntType']['output']
  cssRgb: Scalars['String']['output']
  green: Scalars['IntType']['output']
  hex: Scalars['String']['output']
  red: Scalars['IntType']['output']
}

export type CompanyModelFilter = {
  AND?: InputMaybe<Array<InputMaybe<CompanyModelFilter>>>
  OR?: InputMaybe<Array<InputMaybe<CompanyModelFilter>>>
  _createdAt?: InputMaybe<CreatedAtFilter>
  _firstPublishedAt?: InputMaybe<PublishedAtFilter>
  _isValid?: InputMaybe<BooleanFilter>
  _publicationScheduledAt?: InputMaybe<PublishedAtFilter>
  _publishedAt?: InputMaybe<PublishedAtFilter>
  _status?: InputMaybe<StatusFilter>
  _unpublishingScheduledAt?: InputMaybe<PublishedAtFilter>
  _updatedAt?: InputMaybe<UpdatedAtFilter>
  associates?: InputMaybe<LinksFilter>
  id?: InputMaybe<ItemIdFilter>
  logo?: InputMaybe<FileFilter>
  name?: InputMaybe<StringFilter>
}

export const CompanyModelOrderBy = {
  _createdAt_ASC: '_createdAt_ASC',
  _createdAt_DESC: '_createdAt_DESC',
  _firstPublishedAt_ASC: '_firstPublishedAt_ASC',
  _firstPublishedAt_DESC: '_firstPublishedAt_DESC',
  _isValid_ASC: '_isValid_ASC',
  _isValid_DESC: '_isValid_DESC',
  _publicationScheduledAt_ASC: '_publicationScheduledAt_ASC',
  _publicationScheduledAt_DESC: '_publicationScheduledAt_DESC',
  _publishedAt_ASC: '_publishedAt_ASC',
  _publishedAt_DESC: '_publishedAt_DESC',
  _status_ASC: '_status_ASC',
  _status_DESC: '_status_DESC',
  _unpublishingScheduledAt_ASC: '_unpublishingScheduledAt_ASC',
  _unpublishingScheduledAt_DESC: '_unpublishingScheduledAt_DESC',
  _updatedAt_ASC: '_updatedAt_ASC',
  _updatedAt_DESC: '_updatedAt_DESC',
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  name_ASC: 'name_ASC',
  name_DESC: 'name_DESC'
} as const

export type CompanyModelOrderBy =
  (typeof CompanyModelOrderBy)[keyof typeof CompanyModelOrderBy]
export type CompanyRecord = RecordInterface & {
  __typename: 'CompanyRecord'
  _allReferencingGlobals: Array<GlobalRecord>
  _allReferencingGlobalsMeta: CollectionMetadata
  _allReferencingPosts: Array<PostRecord>
  _allReferencingPostsMeta: CollectionMetadata
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  associates: Array<PersonRecord>
  id: Scalars['ItemId']['output']
  logo: Maybe<FileField>
  name: Scalars['String']['output']
}

export type CompanyRecordAllReferencingGlobalsArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<GlobalModelFilter>
  first?: InputMaybe<Scalars['IntType']['input']>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<GlobalModelOrderBy>>>
  skip?: InputMaybe<Scalars['IntType']['input']>
  through?: InputMaybe<InverseRelationshipFilterBetweenGlobalAndCompany>
}

export type CompanyRecordAllReferencingGlobalsMetaArgs = {
  filter?: InputMaybe<GlobalModelFilter>
  locale?: InputMaybe<SiteLocale>
  through?: InputMaybe<InverseRelationshipFilterBetweenGlobalAndCompany>
}

export type CompanyRecordAllReferencingPostsArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<PostModelFilter>
  first?: InputMaybe<Scalars['IntType']['input']>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<PostModelOrderBy>>>
  skip?: InputMaybe<Scalars['IntType']['input']>
  through?: InputMaybe<InverseRelationshipFilterBetweenPostAndCompany>
}

export type CompanyRecordAllReferencingPostsMetaArgs = {
  filter?: InputMaybe<PostModelFilter>
  locale?: InputMaybe<SiteLocale>
  through?: InputMaybe<InverseRelationshipFilterBetweenPostAndCompany>
}

export type CompanyRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type CreatedAtFilter = {
  eq?: InputMaybe<Scalars['DateTime']['input']>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  gt?: InputMaybe<Scalars['DateTime']['input']>
  gte?: InputMaybe<Scalars['DateTime']['input']>
  lt?: InputMaybe<Scalars['DateTime']['input']>
  lte?: InputMaybe<Scalars['DateTime']['input']>
  neq?: InputMaybe<Scalars['DateTime']['input']>
}

export type DateFilter = {
  eq?: InputMaybe<Scalars['Date']['input']>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  gt?: InputMaybe<Scalars['Date']['input']>
  gte?: InputMaybe<Scalars['Date']['input']>
  lt?: InputMaybe<Scalars['Date']['input']>
  lte?: InputMaybe<Scalars['Date']['input']>
  neq?: InputMaybe<Scalars['Date']['input']>
}

export const FaviconType = {
  appleTouchIcon: 'appleTouchIcon',
  icon: 'icon',
  msApplication: 'msApplication'
} as const

export type FaviconType = (typeof FaviconType)[keyof typeof FaviconType]
export type FileField = FileFieldInterface & {
  __typename: 'FileField'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _updatedAt: Scalars['DateTime']['output']
  alt: Maybe<Scalars['String']['output']>
  author: Maybe<Scalars['String']['output']>
  basename: Scalars['String']['output']
  blurUpThumb: Maybe<Scalars['String']['output']>
  blurhash: Maybe<Scalars['String']['output']>
  colors: Array<ColorField>
  copyright: Maybe<Scalars['String']['output']>
  customData: Scalars['CustomData']['output']
  exifInfo: Scalars['CustomData']['output']
  filename: Scalars['String']['output']
  focalPoint: Maybe<FocalPoint>
  format: Scalars['String']['output']
  height: Maybe<Scalars['IntType']['output']>
  id: Scalars['UploadId']['output']
  md5: Scalars['String']['output']
  mimeType: Scalars['String']['output']
  notes: Maybe<Scalars['String']['output']>
  responsiveImage: Maybe<ResponsiveImage>
  size: Scalars['IntType']['output']
  smartTags: Array<Scalars['String']['output']>
  tags: Array<Scalars['String']['output']>
  thumbhash: Maybe<Scalars['String']['output']>
  title: Maybe<Scalars['String']['output']>
  url: Scalars['String']['output']
  video: Maybe<UploadVideoField>
  width: Maybe<Scalars['IntType']['output']>
}

export type FileFieldAltArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type FileFieldBlurUpThumbArgs = {
  imgixParams?: InputMaybe<ImgixParams>
  punch?: Scalars['Float']['input']
  quality?: Scalars['Int']['input']
  size?: Scalars['Int']['input']
}

export type FileFieldCustomDataArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type FileFieldFocalPointArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type FileFieldResponsiveImageArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  imgixParams?: InputMaybe<ImgixParams>
  locale?: InputMaybe<SiteLocale>
  sizes?: InputMaybe<Scalars['String']['input']>
}

export type FileFieldTitleArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type FileFieldUrlArgs = {
  imgixParams?: InputMaybe<ImgixParams>
}

export type FileFieldInterface = {
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _updatedAt: Scalars['DateTime']['output']
  alt: Maybe<Scalars['String']['output']>
  author: Maybe<Scalars['String']['output']>
  basename: Scalars['String']['output']
  blurUpThumb: Maybe<Scalars['String']['output']>
  blurhash: Maybe<Scalars['String']['output']>
  colors: Array<ColorField>
  copyright: Maybe<Scalars['String']['output']>
  customData: Scalars['CustomData']['output']
  exifInfo: Scalars['CustomData']['output']
  filename: Scalars['String']['output']
  focalPoint: Maybe<FocalPoint>
  format: Scalars['String']['output']
  height: Maybe<Scalars['IntType']['output']>
  id: Scalars['UploadId']['output']
  md5: Scalars['String']['output']
  mimeType: Scalars['String']['output']
  notes: Maybe<Scalars['String']['output']>
  responsiveImage: Maybe<ResponsiveImage>
  size: Scalars['IntType']['output']
  smartTags: Array<Scalars['String']['output']>
  tags: Array<Scalars['String']['output']>
  thumbhash: Maybe<Scalars['String']['output']>
  title: Maybe<Scalars['String']['output']>
  url: Scalars['String']['output']
  video: Maybe<UploadVideoField>
  width: Maybe<Scalars['IntType']['output']>
}

export type FileFieldInterfaceAltArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type FileFieldInterfaceBlurUpThumbArgs = {
  imgixParams?: InputMaybe<ImgixParams>
  punch?: Scalars['Float']['input']
  quality?: Scalars['Int']['input']
  size?: Scalars['Int']['input']
}

export type FileFieldInterfaceCustomDataArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type FileFieldInterfaceFocalPointArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type FileFieldInterfaceResponsiveImageArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  imgixParams?: InputMaybe<ImgixParams>
  locale?: InputMaybe<SiteLocale>
  sizes?: InputMaybe<Scalars['String']['input']>
}

export type FileFieldInterfaceTitleArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type FileFieldInterfaceUrlArgs = {
  imgixParams?: InputMaybe<ImgixParams>
}

export type FileFilter = {
  eq?: InputMaybe<Scalars['UploadId']['input']>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['UploadId']['input']>>>
  neq?: InputMaybe<Scalars['UploadId']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['UploadId']['input']>>>
}

export type FooterLinkRecord = RecordInterface & {
  __typename: 'FooterLinkRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
  title: Maybe<Scalars['String']['output']>
  url: Maybe<Scalars['String']['output']>
}

export type FooterLinkRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type GalleryFilter = {
  allIn?: InputMaybe<Array<InputMaybe<Scalars['UploadId']['input']>>>
  anyIn?: InputMaybe<Array<InputMaybe<Scalars['UploadId']['input']>>>
  eq?: InputMaybe<Array<InputMaybe<Scalars['UploadId']['input']>>>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['UploadId']['input']>>>
}

export const GlobalModelFieldsReferencingCompanyModel = {
  global_infoDrawerContent: 'global_infoDrawerContent',
  global_infoDrawerContent__infoPartnersList_partners:
    'global_infoDrawerContent__infoPartnersList_partners'
} as const

export type GlobalModelFieldsReferencingCompanyModel =
  (typeof GlobalModelFieldsReferencingCompanyModel)[keyof typeof GlobalModelFieldsReferencingCompanyModel]
export type GlobalModelFilter = {
  AND?: InputMaybe<Array<InputMaybe<GlobalModelFilter>>>
  OR?: InputMaybe<Array<InputMaybe<GlobalModelFilter>>>
  _createdAt?: InputMaybe<CreatedAtFilter>
  _firstPublishedAt?: InputMaybe<PublishedAtFilter>
  _isValid?: InputMaybe<BooleanFilter>
  _publicationScheduledAt?: InputMaybe<PublishedAtFilter>
  _publishedAt?: InputMaybe<PublishedAtFilter>
  _status?: InputMaybe<StatusFilter>
  _unpublishingScheduledAt?: InputMaybe<PublishedAtFilter>
  _updatedAt?: InputMaybe<UpdatedAtFilter>
  id?: InputMaybe<ItemIdFilter>
  infoDrawerContent?: InputMaybe<StructuredTextFilter>
}

export type GlobalModelInfoDrawerContentField = {
  __typename: 'GlobalModelInfoDrawerContentField'
  blocks: Array<InfoPartnersListRecord>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export const GlobalModelOrderBy = {
  _createdAt_ASC: '_createdAt_ASC',
  _createdAt_DESC: '_createdAt_DESC',
  _firstPublishedAt_ASC: '_firstPublishedAt_ASC',
  _firstPublishedAt_DESC: '_firstPublishedAt_DESC',
  _isValid_ASC: '_isValid_ASC',
  _isValid_DESC: '_isValid_DESC',
  _publicationScheduledAt_ASC: '_publicationScheduledAt_ASC',
  _publicationScheduledAt_DESC: '_publicationScheduledAt_DESC',
  _publishedAt_ASC: '_publishedAt_ASC',
  _publishedAt_DESC: '_publishedAt_DESC',
  _status_ASC: '_status_ASC',
  _status_DESC: '_status_DESC',
  _unpublishingScheduledAt_ASC: '_unpublishingScheduledAt_ASC',
  _unpublishingScheduledAt_DESC: '_unpublishingScheduledAt_DESC',
  _updatedAt_ASC: '_updatedAt_ASC',
  _updatedAt_DESC: '_updatedAt_DESC',
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC'
} as const

export type GlobalModelOrderBy =
  (typeof GlobalModelOrderBy)[keyof typeof GlobalModelOrderBy]
export type GlobalRecord = RecordInterface & {
  __typename: 'GlobalRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  footerLinks: Array<FooterLinkRecord>
  id: Scalars['ItemId']['output']
  infoDrawerContent: Maybe<GlobalModelInfoDrawerContentField>
}

export type GlobalRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type GlobalSeoField = {
  __typename: 'GlobalSeoField'
  facebookPageUrl: Maybe<Scalars['String']['output']>
  fallbackSeo: Maybe<SeoField>
  siteName: Maybe<Scalars['String']['output']>
  titleSuffix: Maybe<Scalars['String']['output']>
  twitterAccount: Maybe<Scalars['String']['output']>
}

export type GridAssetsRowRecord = RecordInterface & {
  __typename: 'GridAssetsRowRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  assets: Array<FileField>
  id: Scalars['ItemId']['output']
}

export type GridAssetsRowRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type HeroCaseStudyModelContentField = {
  __typename: 'HeroCaseStudyModelContentField'
  blocks: Array<Scalars['String']['output']>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export type HeroCaseStudyRecord = RecordInterface & {
  __typename: 'HeroCaseStudyRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  assets: Array<GridAssetsRowRecord>
  callToAction: Maybe<Scalars['String']['output']>
  caseStudyPopupTitle: Maybe<Scalars['String']['output']>
  caseStudyPost: Maybe<PostRecord>
  content: Maybe<HeroCaseStudyModelContentField>
  coverAsset: Maybe<FileField>
  coverAssetMobile: Maybe<FileField>
  highlight: Maybe<Scalars['String']['output']>
  id: Scalars['ItemId']['output']
  overlayColor: Maybe<ColorField>
  shortTitle: Maybe<Scalars['String']['output']>
  title: Maybe<Scalars['String']['output']>
}

export type HeroCaseStudyRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type HeroCaseStudyRecordCaseStudyPopupTitleArgs = {
  markdown?: InputMaybe<Scalars['Boolean']['input']>
}

export type HeroCaseStudyRecordTitleArgs = {
  markdown?: InputMaybe<Scalars['Boolean']['input']>
}

export type HomePageModelSectionsField =
  | SectionAboutRecord
  | SectionCaseStudyRecord
  | SectionHeroRecord
  | SectionPostsCarouselRecord

export type HomePageRecord = RecordInterface & {
  __typename: 'HomePageRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
  sections: Array<HomePageModelSectionsField>
  seo: Maybe<SeoField>
}

export type HomePageRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type ImgixParams = {
  ar?: InputMaybe<Scalars['String']['input']>
  auto?: InputMaybe<Array<ImgixParamsAuto>>
  bg?: InputMaybe<Scalars['String']['input']>
  bgRemove?: InputMaybe<Scalars['BooleanType']['input']>
  bgRemoveFallback?: InputMaybe<Scalars['BooleanType']['input']>
  bgRemoveFgType?: InputMaybe<Array<ImgixParamsBgRemoveFgType>>
  bgRemoveSemiTransparency?: InputMaybe<Scalars['BooleanType']['input']>
  bgReplace?: InputMaybe<Scalars['String']['input']>
  bgReplaceFallback?: InputMaybe<Scalars['BooleanType']['input']>
  bgReplaceNegPrompt?: InputMaybe<Scalars['String']['input']>
  blend?: InputMaybe<Scalars['String']['input']>
  blendAlign?: InputMaybe<Array<ImgixParamsBlendAlign>>
  blendAlpha?: InputMaybe<Scalars['IntType']['input']>
  blendColor?: InputMaybe<Scalars['String']['input']>
  blendCrop?: InputMaybe<Array<ImgixParamsBlendCrop>>
  blendFit?: InputMaybe<ImgixParamsBlendFit>
  blendH?: InputMaybe<Scalars['FloatType']['input']>
  blendMode?: InputMaybe<ImgixParamsBlendMode>
  blendPad?: InputMaybe<Scalars['IntType']['input']>
  blendSize?: InputMaybe<ImgixParamsBlendSize>
  blendW?: InputMaybe<Scalars['FloatType']['input']>
  blendX?: InputMaybe<Scalars['IntType']['input']>
  blendY?: InputMaybe<Scalars['IntType']['input']>
  blur?: InputMaybe<Scalars['IntType']['input']>
  border?: InputMaybe<Scalars['String']['input']>
  borderBottom?: InputMaybe<Scalars['IntType']['input']>
  borderLeft?: InputMaybe<Scalars['IntType']['input']>
  borderRadius?: InputMaybe<Scalars['String']['input']>
  borderRadiusInner?: InputMaybe<Scalars['String']['input']>
  borderRight?: InputMaybe<Scalars['IntType']['input']>
  borderTop?: InputMaybe<Scalars['IntType']['input']>
  bri?: InputMaybe<Scalars['IntType']['input']>
  ch?: InputMaybe<Array<ImgixParamsCh>>
  chromasub?: InputMaybe<Scalars['IntType']['input']>
  colorquant?: InputMaybe<Scalars['IntType']['input']>
  colors?: InputMaybe<Scalars['IntType']['input']>
  con?: InputMaybe<Scalars['IntType']['input']>
  cornerRadius?: InputMaybe<Scalars['String']['input']>
  crop?: InputMaybe<Array<ImgixParamsCrop>>
  cs?: InputMaybe<ImgixParamsCs>
  dl?: InputMaybe<Scalars['String']['input']>
  dpi?: InputMaybe<Scalars['IntType']['input']>
  dpr?: InputMaybe<Scalars['FloatType']['input']>
  duotone?: InputMaybe<Scalars['String']['input']>
  duotoneAlpha?: InputMaybe<Scalars['IntType']['input']>
  exp?: InputMaybe<Scalars['IntType']['input']>
  expires?: InputMaybe<Scalars['IntType']['input']>
  faceBlur?: InputMaybe<Scalars['IntType']['input']>
  facePixel?: InputMaybe<Scalars['IntType']['input']>
  faceindex?: InputMaybe<Scalars['IntType']['input']>
  facepad?: InputMaybe<Scalars['FloatType']['input']>
  faces?: InputMaybe<Scalars['IntType']['input']>
  fill?: InputMaybe<ImgixParamsFill>
  fillColor?: InputMaybe<Scalars['String']['input']>
  fillGenFallback?: InputMaybe<Scalars['BooleanType']['input']>
  fillGenNegPrompt?: InputMaybe<Scalars['String']['input']>
  fillGenPos?: InputMaybe<Array<ImgixParamsFillGenPos>>
  fillGenPrompt?: InputMaybe<Scalars['String']['input']>
  fillGenSeed?: InputMaybe<Scalars['IntType']['input']>
  fillGradientCs?: InputMaybe<ImgixParamsFillGradientCs>
  fillGradientLinear?: InputMaybe<Scalars['String']['input']>
  fillGradientLinearDirection?: InputMaybe<
    Array<ImgixParamsFillGradientLinearDirection>
  >
  fillGradientRadial?: InputMaybe<Scalars['String']['input']>
  fillGradientRadialRadius?: InputMaybe<Scalars['String']['input']>
  fillGradientRadialX?: InputMaybe<Scalars['FloatType']['input']>
  fillGradientRadialY?: InputMaybe<Scalars['FloatType']['input']>
  fillGradientType?: InputMaybe<ImgixParamsFillGradientType>
  fit?: InputMaybe<ImgixParamsFit>
  flip?: InputMaybe<ImgixParamsFlip>
  fm?: InputMaybe<ImgixParamsFm>
  fpDebug?: InputMaybe<Scalars['BooleanType']['input']>
  fpX?: InputMaybe<Scalars['FloatType']['input']>
  fpY?: InputMaybe<Scalars['FloatType']['input']>
  fpZ?: InputMaybe<Scalars['FloatType']['input']>
  fps?: InputMaybe<Scalars['IntType']['input']>
  frame?: InputMaybe<Scalars['String']['input']>
  gam?: InputMaybe<Scalars['IntType']['input']>
  gifQ?: InputMaybe<Scalars['IntType']['input']>
  gridColors?: InputMaybe<Scalars['String']['input']>
  gridSize?: InputMaybe<Scalars['IntType']['input']>
  h?: InputMaybe<Scalars['FloatType']['input']>
  high?: InputMaybe<Scalars['IntType']['input']>
  htn?: InputMaybe<Scalars['IntType']['input']>
  hue?: InputMaybe<Scalars['IntType']['input']>
  interval?: InputMaybe<Scalars['IntType']['input']>
  invert?: InputMaybe<Scalars['BooleanType']['input']>
  iptc?: InputMaybe<ImgixParamsIptc>
  jpgProgressive?: InputMaybe<Scalars['BooleanType']['input']>
  loop?: InputMaybe<Scalars['IntType']['input']>
  lossless?: InputMaybe<Scalars['BooleanType']['input']>
  lpBlur?: InputMaybe<Scalars['IntType']['input']>
  mark?: InputMaybe<Scalars['String']['input']>
  markAlign?: InputMaybe<Array<ImgixParamsMarkAlign>>
  markAlpha?: InputMaybe<Scalars['IntType']['input']>
  markBase?: InputMaybe<Scalars['String']['input']>
  markFit?: InputMaybe<ImgixParamsMarkFit>
  markH?: InputMaybe<Scalars['FloatType']['input']>
  markIfMinHeight?: InputMaybe<Scalars['IntType']['input']>
  markIfMinWidth?: InputMaybe<Scalars['IntType']['input']>
  markPad?: InputMaybe<Scalars['IntType']['input']>
  markRot?: InputMaybe<Scalars['FloatType']['input']>
  markScale?: InputMaybe<Scalars['IntType']['input']>
  markTile?: InputMaybe<ImgixParamsMarkTile>
  markW?: InputMaybe<Scalars['FloatType']['input']>
  markX?: InputMaybe<Scalars['IntType']['input']>
  markY?: InputMaybe<Scalars['IntType']['input']>
  mask?: InputMaybe<Scalars['String']['input']>
  maskBg?: InputMaybe<Scalars['String']['input']>
  maxH?: InputMaybe<Scalars['IntType']['input']>
  maxW?: InputMaybe<Scalars['IntType']['input']>
  minH?: InputMaybe<Scalars['IntType']['input']>
  minW?: InputMaybe<Scalars['IntType']['input']>
  monochrome?: InputMaybe<Scalars['String']['input']>
  nr?: InputMaybe<Scalars['IntType']['input']>
  nrs?: InputMaybe<Scalars['IntType']['input']>
  objectRemovalNegativePrompt?: InputMaybe<Scalars['String']['input']>
  objectRemovalPrompt?: InputMaybe<Scalars['String']['input']>
  objectRemovalRect?: InputMaybe<Scalars['String']['input']>
  objectRemovalSeed?: InputMaybe<Scalars['IntType']['input']>
  orient?: InputMaybe<Scalars['IntType']['input']>
  pad?: InputMaybe<Scalars['IntType']['input']>
  padBottom?: InputMaybe<Scalars['IntType']['input']>
  padLeft?: InputMaybe<Scalars['IntType']['input']>
  padRight?: InputMaybe<Scalars['IntType']['input']>
  padTop?: InputMaybe<Scalars['IntType']['input']>
  page?: InputMaybe<Scalars['IntType']['input']>
  palette?: InputMaybe<ImgixParamsPalette>
  pdfAnnotation?: InputMaybe<Scalars['BooleanType']['input']>
  prefix?: InputMaybe<Scalars['String']['input']>
  px?: InputMaybe<Scalars['IntType']['input']>
  q?: InputMaybe<Scalars['IntType']['input']>
  rasterizeBypass?: InputMaybe<Scalars['BooleanType']['input']>
  rect?: InputMaybe<Scalars['String']['input']>
  reverse?: InputMaybe<Scalars['BooleanType']['input']>
  rot?: InputMaybe<Scalars['FloatType']['input']>
  rotType?: InputMaybe<ImgixParamsRotType>
  sat?: InputMaybe<Scalars['IntType']['input']>
  sepia?: InputMaybe<Scalars['IntType']['input']>
  shad?: InputMaybe<Scalars['FloatType']['input']>
  sharp?: InputMaybe<Scalars['FloatType']['input']>
  skip?: InputMaybe<Scalars['IntType']['input']>
  skipDefaultOptimizations?: InputMaybe<Scalars['BooleanType']['input']>
  svgSanitize?: InputMaybe<Scalars['BooleanType']['input']>
  transparency?: InputMaybe<ImgixParamsTransparency>
  trim?: InputMaybe<ImgixParamsTrim>
  trimAlpha?: InputMaybe<Scalars['FloatType']['input']>
  trimColor?: InputMaybe<Scalars['String']['input']>
  trimMd?: InputMaybe<Scalars['FloatType']['input']>
  trimPad?: InputMaybe<Scalars['IntType']['input']>
  trimSd?: InputMaybe<Scalars['FloatType']['input']>
  trimTol?: InputMaybe<Scalars['FloatType']['input']>
  txt?: InputMaybe<Scalars['String']['input']>
  txtAlign?: InputMaybe<Array<ImgixParamsTxtAlign>>
  txtClip?: InputMaybe<Array<ImgixParamsTxtClip>>
  txtColor?: InputMaybe<Scalars['String']['input']>
  txtFit?: InputMaybe<ImgixParamsTxtFit>
  txtFont?: InputMaybe<Scalars['String']['input']>
  txtLead?: InputMaybe<Scalars['IntType']['input']>
  txtLine?: InputMaybe<Scalars['IntType']['input']>
  txtLineColor?: InputMaybe<Scalars['String']['input']>
  txtPad?: InputMaybe<Scalars['IntType']['input']>
  txtShad?: InputMaybe<Scalars['FloatType']['input']>
  txtSize?: InputMaybe<Scalars['IntType']['input']>
  txtTrack?: InputMaybe<Scalars['IntType']['input']>
  txtWidth?: InputMaybe<Scalars['IntType']['input']>
  txtX?: InputMaybe<Scalars['IntType']['input']>
  txtY?: InputMaybe<Scalars['IntType']['input']>
  upscale?: InputMaybe<Scalars['BooleanType']['input']>
  upscaleFallback?: InputMaybe<Scalars['BooleanType']['input']>
  usm?: InputMaybe<Scalars['IntType']['input']>
  usmrad?: InputMaybe<Scalars['FloatType']['input']>
  vib?: InputMaybe<Scalars['IntType']['input']>
  w?: InputMaybe<Scalars['FloatType']['input']>
}

export const ImgixParamsAuto = {
  compress: 'compress',
  enhance: 'enhance',
  format: 'format',
  redeye: 'redeye'
} as const

export type ImgixParamsAuto =
  (typeof ImgixParamsAuto)[keyof typeof ImgixParamsAuto]
export const ImgixParamsBgRemoveFgType = {
  auto: 'auto',
  car: 'car'
} as const

export type ImgixParamsBgRemoveFgType =
  (typeof ImgixParamsBgRemoveFgType)[keyof typeof ImgixParamsBgRemoveFgType]
export const ImgixParamsBlendAlign = {
  bottom: 'bottom',
  center: 'center',
  left: 'left',
  middle: 'middle',
  right: 'right',
  top: 'top'
} as const

export type ImgixParamsBlendAlign =
  (typeof ImgixParamsBlendAlign)[keyof typeof ImgixParamsBlendAlign]
export const ImgixParamsBlendCrop = {
  bottom: 'bottom',
  faces: 'faces',
  left: 'left',
  right: 'right',
  top: 'top'
} as const

export type ImgixParamsBlendCrop =
  (typeof ImgixParamsBlendCrop)[keyof typeof ImgixParamsBlendCrop]
export const ImgixParamsBlendFit = {
  clamp: 'clamp',
  clip: 'clip',
  crop: 'crop',
  max: 'max',
  scale: 'scale'
} as const

export type ImgixParamsBlendFit =
  (typeof ImgixParamsBlendFit)[keyof typeof ImgixParamsBlendFit]
export const ImgixParamsBlendMode = {
  burn: 'burn',
  color: 'color',
  darken: 'darken',
  difference: 'difference',
  dodge: 'dodge',
  exclusion: 'exclusion',
  hardlight: 'hardlight',
  hue: 'hue',
  lighten: 'lighten',
  luminosity: 'luminosity',
  multiply: 'multiply',
  normal: 'normal',
  overlay: 'overlay',
  saturation: 'saturation',
  screen: 'screen',
  softlight: 'softlight'
} as const

export type ImgixParamsBlendMode =
  (typeof ImgixParamsBlendMode)[keyof typeof ImgixParamsBlendMode]
export const ImgixParamsBlendSize = {
  inherit: 'inherit'
} as const

export type ImgixParamsBlendSize =
  (typeof ImgixParamsBlendSize)[keyof typeof ImgixParamsBlendSize]
export const ImgixParamsCh = {
  dpr: 'dpr',
  saveData: 'saveData',
  width: 'width'
} as const

export type ImgixParamsCh = (typeof ImgixParamsCh)[keyof typeof ImgixParamsCh]
export const ImgixParamsCrop = {
  bottom: 'bottom',
  edges: 'edges',
  entropy: 'entropy',
  faces: 'faces',
  focalpoint: 'focalpoint',
  left: 'left',
  right: 'right',
  top: 'top'
} as const

export type ImgixParamsCrop =
  (typeof ImgixParamsCrop)[keyof typeof ImgixParamsCrop]
export const ImgixParamsCs = {
  adobergb1998: 'adobergb1998',
  origin: 'origin',
  srgb: 'srgb',
  strip: 'strip',
  tinysrgb: 'tinysrgb'
} as const

export type ImgixParamsCs = (typeof ImgixParamsCs)[keyof typeof ImgixParamsCs]
export const ImgixParamsFill = {
  blur: 'blur',
  gen: 'gen',
  generative: 'generative',
  gradient: 'gradient',
  solid: 'solid'
} as const

export type ImgixParamsFill =
  (typeof ImgixParamsFill)[keyof typeof ImgixParamsFill]
export const ImgixParamsFillGenPos = {
  bottom: 'bottom',
  center: 'center',
  left: 'left',
  middle: 'middle',
  right: 'right',
  top: 'top'
} as const

export type ImgixParamsFillGenPos =
  (typeof ImgixParamsFillGenPos)[keyof typeof ImgixParamsFillGenPos]
export const ImgixParamsFillGradientCs = {
  hsl: 'hsl',
  lch: 'lch',
  linear: 'linear',
  oklab: 'oklab',
  srgb: 'srgb'
} as const

export type ImgixParamsFillGradientCs =
  (typeof ImgixParamsFillGradientCs)[keyof typeof ImgixParamsFillGradientCs]
export const ImgixParamsFillGradientLinearDirection = {
  bottom: 'bottom',
  left: 'left',
  right: 'right',
  top: 'top'
} as const

export type ImgixParamsFillGradientLinearDirection =
  (typeof ImgixParamsFillGradientLinearDirection)[keyof typeof ImgixParamsFillGradientLinearDirection]
export const ImgixParamsFillGradientType = {
  linear: 'linear',
  radial: 'radial'
} as const

export type ImgixParamsFillGradientType =
  (typeof ImgixParamsFillGradientType)[keyof typeof ImgixParamsFillGradientType]
export const ImgixParamsFit = {
  clamp: 'clamp',
  clip: 'clip',
  crop: 'crop',
  facearea: 'facearea',
  fill: 'fill',
  fillmax: 'fillmax',
  max: 'max',
  min: 'min',
  scale: 'scale'
} as const

export type ImgixParamsFit =
  (typeof ImgixParamsFit)[keyof typeof ImgixParamsFit]
export const ImgixParamsFlip = {
  h: 'h',
  hv: 'hv',
  v: 'v'
} as const

export type ImgixParamsFlip =
  (typeof ImgixParamsFlip)[keyof typeof ImgixParamsFlip]
export const ImgixParamsFm = {
  avif: 'avif',
  blurhash: 'blurhash',
  gif: 'gif',
  jp2: 'jp2',
  jpg: 'jpg',
  json: 'json',
  jxr: 'jxr',
  mp4: 'mp4',
  pjpg: 'pjpg',
  png: 'png',
  png8: 'png8',
  png32: 'png32',
  webm: 'webm',
  webp: 'webp'
} as const

export type ImgixParamsFm = (typeof ImgixParamsFm)[keyof typeof ImgixParamsFm]
export const ImgixParamsIptc = {
  allow: 'allow',
  block: 'block'
} as const

export type ImgixParamsIptc =
  (typeof ImgixParamsIptc)[keyof typeof ImgixParamsIptc]
export const ImgixParamsMarkAlign = {
  bottom: 'bottom',
  center: 'center',
  left: 'left',
  middle: 'middle',
  right: 'right',
  top: 'top'
} as const

export type ImgixParamsMarkAlign =
  (typeof ImgixParamsMarkAlign)[keyof typeof ImgixParamsMarkAlign]
export const ImgixParamsMarkFit = {
  clip: 'clip',
  crop: 'crop',
  fill: 'fill',
  max: 'max',
  scale: 'scale'
} as const

export type ImgixParamsMarkFit =
  (typeof ImgixParamsMarkFit)[keyof typeof ImgixParamsMarkFit]
export const ImgixParamsMarkTile = {
  grid: 'grid'
} as const

export type ImgixParamsMarkTile =
  (typeof ImgixParamsMarkTile)[keyof typeof ImgixParamsMarkTile]
export const ImgixParamsPalette = {
  css: 'css',
  json: 'json'
} as const

export type ImgixParamsPalette =
  (typeof ImgixParamsPalette)[keyof typeof ImgixParamsPalette]
export const ImgixParamsRotType = {
  pivot: 'pivot',
  straighten: 'straighten'
} as const

export type ImgixParamsRotType =
  (typeof ImgixParamsRotType)[keyof typeof ImgixParamsRotType]
export const ImgixParamsTransparency = {
  grid: 'grid'
} as const

export type ImgixParamsTransparency =
  (typeof ImgixParamsTransparency)[keyof typeof ImgixParamsTransparency]
export const ImgixParamsTrim = {
  alpha: 'alpha',
  auto: 'auto',
  color: 'color'
} as const

export type ImgixParamsTrim =
  (typeof ImgixParamsTrim)[keyof typeof ImgixParamsTrim]
export const ImgixParamsTxtAlign = {
  bottom: 'bottom',
  center: 'center',
  left: 'left',
  middle: 'middle',
  right: 'right',
  top: 'top'
} as const

export type ImgixParamsTxtAlign =
  (typeof ImgixParamsTxtAlign)[keyof typeof ImgixParamsTxtAlign]
export const ImgixParamsTxtClip = {
  ellipsis: 'ellipsis',
  end: 'end',
  middle: 'middle',
  start: 'start'
} as const

export type ImgixParamsTxtClip =
  (typeof ImgixParamsTxtClip)[keyof typeof ImgixParamsTxtClip]
export const ImgixParamsTxtFit = {
  max: 'max'
} as const

export type ImgixParamsTxtFit =
  (typeof ImgixParamsTxtFit)[keyof typeof ImgixParamsTxtFit]
export type InUseFilter = {
  eq?: InputMaybe<Scalars['BooleanType']['input']>
}

export type InfoPartnersListRecord = RecordInterface & {
  __typename: 'InfoPartnersListRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
  partners: Array<CompanyRecord>
  title: Maybe<Scalars['String']['output']>
}

export type InfoPartnersListRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type InverseRelationshipFieldFilterBetweenGlobalAndCompany = {
  anyIn?: InputMaybe<Array<GlobalModelFieldsReferencingCompanyModel>>
  notIn?: InputMaybe<Array<GlobalModelFieldsReferencingCompanyModel>>
}

export type InverseRelationshipFieldFilterBetweenPostAndCompany = {
  anyIn?: InputMaybe<Array<PostModelFieldsReferencingCompanyModel>>
  notIn?: InputMaybe<Array<PostModelFieldsReferencingCompanyModel>>
}

export type InverseRelationshipFilterBetweenGlobalAndCompany = {
  fields?: InputMaybe<InverseRelationshipFieldFilterBetweenGlobalAndCompany>
  locales?: InputMaybe<LinkingLocalesFilter>
}

export type InverseRelationshipFilterBetweenPostAndCompany = {
  fields?: InputMaybe<InverseRelationshipFieldFilterBetweenPostAndCompany>
  locales?: InputMaybe<LinkingLocalesFilter>
}

export type ItemIdFilter = {
  eq?: InputMaybe<Scalars['ItemId']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['ItemId']['input']>>>
  neq?: InputMaybe<Scalars['ItemId']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ItemId']['input']>>>
}

export const ItemStatus = {
  draft: 'draft',
  published: 'published',
  updated: 'updated'
} as const

export type ItemStatus = (typeof ItemStatus)[keyof typeof ItemStatus]
export type JsonFilter = {
  exists?: InputMaybe<Scalars['BooleanType']['input']>
}

export type LatLonField = {
  __typename: 'LatLonField'
  latitude: Scalars['FloatType']['output']
  longitude: Scalars['FloatType']['output']
}

export type LatLonFilter = {
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  near?: InputMaybe<LatLonNearFilter>
}

export type LatLonNearFilter = {
  latitude: Scalars['FloatType']['input']
  longitude: Scalars['FloatType']['input']
  radius: Scalars['FloatType']['input']
}

export type LegacyBannerRecord = RecordInterface & {
  __typename: 'LegacyBannerRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  caption: Maybe<Scalars['String']['output']>
  id: Scalars['ItemId']['output']
  image: Maybe<FileField>
}

export type LegacyBannerRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type LegacyGalleryRecord = RecordInterface & {
  __typename: 'LegacyGalleryRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
  images: Array<FileField>
  title: Maybe<Scalars['String']['output']>
}

export type LegacyGalleryRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type LegacyHighlightRecord = RecordInterface & {
  __typename: 'LegacyHighlightRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  description: Maybe<Scalars['String']['output']>
  id: Scalars['ItemId']['output']
  title: Maybe<Scalars['String']['output']>
}

export type LegacyHighlightRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type LegacyHighlightRecordDescriptionArgs = {
  markdown?: InputMaybe<Scalars['Boolean']['input']>
}

export type LegacyQuoteRecord = RecordInterface & {
  __typename: 'LegacyQuoteRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  author: Maybe<Scalars['String']['output']>
  id: Scalars['ItemId']['output']
  quote: Maybe<Scalars['String']['output']>
  url: Maybe<Scalars['String']['output']>
}

export type LegacyQuoteRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type LegacyQuoteRecordQuoteArgs = {
  markdown?: InputMaybe<Scalars['Boolean']['input']>
}

export type LegacySectionRecord = RecordInterface & {
  __typename: 'LegacySectionRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  body: Maybe<Scalars['String']['output']>
  id: Scalars['ItemId']['output']
  navigationTitle: Maybe<Scalars['String']['output']>
  title: Maybe<Scalars['String']['output']>
}

export type LegacySectionRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type LegacySectionRecordBodyArgs = {
  markdown?: InputMaybe<Scalars['Boolean']['input']>
}

export const LinkingLocale = {
  _nonLocalized: '_nonLocalized',
  en: 'en'
} as const

export type LinkingLocale = (typeof LinkingLocale)[keyof typeof LinkingLocale]
export type LinkingLocalesFilter = {
  anyIn?: InputMaybe<Array<LinkingLocale>>
  notIn?: InputMaybe<Array<LinkingLocale>>
}

export type LinksFilter = {
  allIn?: InputMaybe<Array<InputMaybe<Scalars['ItemId']['input']>>>
  anyIn?: InputMaybe<Array<InputMaybe<Scalars['ItemId']['input']>>>
  eq?: InputMaybe<Array<InputMaybe<Scalars['ItemId']['input']>>>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ItemId']['input']>>>
}

export const MuxThumbnailFormatType = {
  gif: 'gif',
  jpg: 'jpg',
  png: 'png'
} as const

export type MuxThumbnailFormatType =
  (typeof MuxThumbnailFormatType)[keyof typeof MuxThumbnailFormatType]
export type OrientationFilter = {
  eq?: InputMaybe<UploadOrientation>
  neq?: InputMaybe<UploadOrientation>
}

export type PageModelContentField = {
  __typename: 'PageModelContentField'
  blocks: Array<Scalars['String']['output']>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export type PageModelFilter = {
  AND?: InputMaybe<Array<InputMaybe<PageModelFilter>>>
  OR?: InputMaybe<Array<InputMaybe<PageModelFilter>>>
  _createdAt?: InputMaybe<CreatedAtFilter>
  _firstPublishedAt?: InputMaybe<PublishedAtFilter>
  _isValid?: InputMaybe<BooleanFilter>
  _publicationScheduledAt?: InputMaybe<PublishedAtFilter>
  _publishedAt?: InputMaybe<PublishedAtFilter>
  _status?: InputMaybe<StatusFilter>
  _unpublishingScheduledAt?: InputMaybe<PublishedAtFilter>
  _updatedAt?: InputMaybe<UpdatedAtFilter>
  content?: InputMaybe<StructuredTextFilter>
  handle?: InputMaybe<SlugFilter>
  id?: InputMaybe<ItemIdFilter>
  seo?: InputMaybe<SeoFilter>
  title?: InputMaybe<StringFilter>
}

export const PageModelOrderBy = {
  _createdAt_ASC: '_createdAt_ASC',
  _createdAt_DESC: '_createdAt_DESC',
  _firstPublishedAt_ASC: '_firstPublishedAt_ASC',
  _firstPublishedAt_DESC: '_firstPublishedAt_DESC',
  _isValid_ASC: '_isValid_ASC',
  _isValid_DESC: '_isValid_DESC',
  _publicationScheduledAt_ASC: '_publicationScheduledAt_ASC',
  _publicationScheduledAt_DESC: '_publicationScheduledAt_DESC',
  _publishedAt_ASC: '_publishedAt_ASC',
  _publishedAt_DESC: '_publishedAt_DESC',
  _status_ASC: '_status_ASC',
  _status_DESC: '_status_DESC',
  _unpublishingScheduledAt_ASC: '_unpublishingScheduledAt_ASC',
  _unpublishingScheduledAt_DESC: '_unpublishingScheduledAt_DESC',
  _updatedAt_ASC: '_updatedAt_ASC',
  _updatedAt_DESC: '_updatedAt_DESC',
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  title_ASC: 'title_ASC',
  title_DESC: 'title_DESC'
} as const

export type PageModelOrderBy =
  (typeof PageModelOrderBy)[keyof typeof PageModelOrderBy]
export type PageRecord = RecordInterface & {
  __typename: 'PageRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  content: Maybe<PageModelContentField>
  handle: Maybe<Scalars['String']['output']>
  id: Scalars['ItemId']['output']
  seo: Maybe<SeoField>
  title: Maybe<Scalars['String']['output']>
}

export type PageRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type PersonModelFilter = {
  AND?: InputMaybe<Array<InputMaybe<PersonModelFilter>>>
  OR?: InputMaybe<Array<InputMaybe<PersonModelFilter>>>
  _createdAt?: InputMaybe<CreatedAtFilter>
  _firstPublishedAt?: InputMaybe<PublishedAtFilter>
  _isValid?: InputMaybe<BooleanFilter>
  _publicationScheduledAt?: InputMaybe<PublishedAtFilter>
  _publishedAt?: InputMaybe<PublishedAtFilter>
  _status?: InputMaybe<StatusFilter>
  _unpublishingScheduledAt?: InputMaybe<PublishedAtFilter>
  _updatedAt?: InputMaybe<UpdatedAtFilter>
  country?: InputMaybe<StringFilter>
  greetingPhrase?: InputMaybe<StringFilter>
  id?: InputMaybe<ItemIdFilter>
  image?: InputMaybe<FileFilter>
  name?: InputMaybe<StringFilter>
  permanentLocation?: InputMaybe<LatLonFilter>
  title?: InputMaybe<StringFilter>
}

export const PersonModelOrderBy = {
  _createdAt_ASC: '_createdAt_ASC',
  _createdAt_DESC: '_createdAt_DESC',
  _firstPublishedAt_ASC: '_firstPublishedAt_ASC',
  _firstPublishedAt_DESC: '_firstPublishedAt_DESC',
  _isValid_ASC: '_isValid_ASC',
  _isValid_DESC: '_isValid_DESC',
  _publicationScheduledAt_ASC: '_publicationScheduledAt_ASC',
  _publicationScheduledAt_DESC: '_publicationScheduledAt_DESC',
  _publishedAt_ASC: '_publishedAt_ASC',
  _publishedAt_DESC: '_publishedAt_DESC',
  _status_ASC: '_status_ASC',
  _status_DESC: '_status_DESC',
  _unpublishingScheduledAt_ASC: '_unpublishingScheduledAt_ASC',
  _unpublishingScheduledAt_DESC: '_unpublishingScheduledAt_DESC',
  _updatedAt_ASC: '_updatedAt_ASC',
  _updatedAt_DESC: '_updatedAt_DESC',
  country_ASC: 'country_ASC',
  country_DESC: 'country_DESC',
  greetingPhrase_ASC: 'greetingPhrase_ASC',
  greetingPhrase_DESC: 'greetingPhrase_DESC',
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  name_ASC: 'name_ASC',
  name_DESC: 'name_DESC',
  title_ASC: 'title_ASC',
  title_DESC: 'title_DESC'
} as const

export type PersonModelOrderBy =
  (typeof PersonModelOrderBy)[keyof typeof PersonModelOrderBy]
export type PersonRecord = RecordInterface & {
  __typename: 'PersonRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  country: Maybe<Scalars['String']['output']>
  greetingPhrase: Maybe<Scalars['String']['output']>
  id: Scalars['ItemId']['output']
  image: Maybe<FileField>
  name: Scalars['String']['output']
  permanentLocation: Maybe<LatLonField>
  title: Maybe<Scalars['String']['output']>
}

export type PersonRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type PostModelContentBlocksField =
  | LegacyBannerRecord
  | LegacyGalleryRecord
  | LegacyHighlightRecord
  | LegacyQuoteRecord
  | LegacySectionRecord

export type PostModelContentField = {
  __typename: 'PostModelContentField'
  blocks: Array<PostModelContentBlocksField>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export const PostModelFieldsReferencingCompanyModel = {
  post_postType: 'post_postType',
  post_postType__postTypeArticle_partners:
    'post_postType__postTypeArticle_partners',
  post_postType__postTypeCaseStudy_partners:
    'post_postType__postTypeCaseStudy_partners'
} as const

export type PostModelFieldsReferencingCompanyModel =
  (typeof PostModelFieldsReferencingCompanyModel)[keyof typeof PostModelFieldsReferencingCompanyModel]
export type PostModelFilter = {
  AND?: InputMaybe<Array<InputMaybe<PostModelFilter>>>
  OR?: InputMaybe<Array<InputMaybe<PostModelFilter>>>
  _createdAt?: InputMaybe<CreatedAtFilter>
  _firstPublishedAt?: InputMaybe<PublishedAtFilter>
  _isValid?: InputMaybe<BooleanFilter>
  _publicationScheduledAt?: InputMaybe<PublishedAtFilter>
  _publishedAt?: InputMaybe<PublishedAtFilter>
  _status?: InputMaybe<StatusFilter>
  _unpublishingScheduledAt?: InputMaybe<PublishedAtFilter>
  _updatedAt?: InputMaybe<UpdatedAtFilter>
  content?: InputMaybe<StructuredTextFilter>
  coverImage?: InputMaybe<FileFilter>
  date?: InputMaybe<DateFilter>
  excerpt?: InputMaybe<TextFilter>
  featuredImages?: InputMaybe<GalleryFilter>
  handle?: InputMaybe<SlugFilter>
  id?: InputMaybe<ItemIdFilter>
  postType?: InputMaybe<PostModelPostTypeFieldFilter>
  seo?: InputMaybe<SeoFilter>
  tags?: InputMaybe<JsonFilter>
  title?: InputMaybe<StringFilter>
  video?: InputMaybe<FileFilter>
}

export const PostModelOrderBy = {
  _createdAt_ASC: '_createdAt_ASC',
  _createdAt_DESC: '_createdAt_DESC',
  _firstPublishedAt_ASC: '_firstPublishedAt_ASC',
  _firstPublishedAt_DESC: '_firstPublishedAt_DESC',
  _isValid_ASC: '_isValid_ASC',
  _isValid_DESC: '_isValid_DESC',
  _publicationScheduledAt_ASC: '_publicationScheduledAt_ASC',
  _publicationScheduledAt_DESC: '_publicationScheduledAt_DESC',
  _publishedAt_ASC: '_publishedAt_ASC',
  _publishedAt_DESC: '_publishedAt_DESC',
  _status_ASC: '_status_ASC',
  _status_DESC: '_status_DESC',
  _unpublishingScheduledAt_ASC: '_unpublishingScheduledAt_ASC',
  _unpublishingScheduledAt_DESC: '_unpublishingScheduledAt_DESC',
  _updatedAt_ASC: '_updatedAt_ASC',
  _updatedAt_DESC: '_updatedAt_DESC',
  date_ASC: 'date_ASC',
  date_DESC: 'date_DESC',
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  title_ASC: 'title_ASC',
  title_DESC: 'title_DESC'
} as const

export type PostModelOrderBy =
  (typeof PostModelOrderBy)[keyof typeof PostModelOrderBy]
export type PostModelPostTypeField =
  | PostTypeArticleRecord
  | PostTypeCaseStudyRecord
  | PostTypeEventRecord

export type PostModelPostTypeFieldBlocksConditions = {
  postTypeArticle?: InputMaybe<PostTypeArticleModelFilter>
  postTypeCaseStudy?: InputMaybe<PostTypeCaseStudyModelFilter>
  postTypeEvent?: InputMaybe<PostTypeEventModelFilter>
}

export type PostModelPostTypeFieldBlocksPresence = {
  postTypeArticle?: InputMaybe<Scalars['BooleanType']['input']>
  postTypeCaseStudy?: InputMaybe<Scalars['BooleanType']['input']>
  postTypeEvent?: InputMaybe<Scalars['BooleanType']['input']>
}

export type PostModelPostTypeFieldFilter = {
  any?: InputMaybe<PostModelPostTypeFieldBlocksConditions>
  containsAny?: InputMaybe<PostModelPostTypeFieldBlocksPresence>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
}

export type PostRecord = RecordInterface & {
  __typename: 'PostRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  content: Maybe<PostModelContentField>
  coverImage: Maybe<FileField>
  date: Maybe<Scalars['Date']['output']>
  excerpt: Maybe<Scalars['String']['output']>
  featuredImages: Array<FileField>
  handle: Scalars['String']['output']
  id: Scalars['ItemId']['output']
  postType: PostModelPostTypeField
  seo: Maybe<SeoField>
  tags: Maybe<Scalars['JsonField']['output']>
  title: Scalars['String']['output']
  video: Maybe<VideoFileField>
}

export type PostRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type PostRecordExcerptArgs = {
  markdown?: InputMaybe<Scalars['Boolean']['input']>
}

export type PostTypeArticleModelFilter = {
  AND?: InputMaybe<Array<InputMaybe<PostTypeArticleModelFilter>>>
  OR?: InputMaybe<Array<InputMaybe<PostTypeArticleModelFilter>>>
  authors?: InputMaybe<LinksFilter>
  id?: InputMaybe<ItemIdFilter>
  partners?: InputMaybe<LinksFilter>
}

export type PostTypeArticleRecord = RecordInterface & {
  __typename: 'PostTypeArticleRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  authors: Array<PersonRecord>
  id: Scalars['ItemId']['output']
  partners: Array<CompanyRecord>
}

export type PostTypeArticleRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type PostTypeCaseStudyModelFilter = {
  AND?: InputMaybe<Array<InputMaybe<PostTypeCaseStudyModelFilter>>>
  OR?: InputMaybe<Array<InputMaybe<PostTypeCaseStudyModelFilter>>>
  id?: InputMaybe<ItemIdFilter>
  partners?: InputMaybe<LinksFilter>
  projectUrl?: InputMaybe<StringFilter>
}

export type PostTypeCaseStudyRecord = RecordInterface & {
  __typename: 'PostTypeCaseStudyRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
  partners: Array<CompanyRecord>
  projectUrl: Maybe<Scalars['String']['output']>
}

export type PostTypeCaseStudyRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type PostTypeEventModelFilter = {
  AND?: InputMaybe<Array<InputMaybe<PostTypeEventModelFilter>>>
  OR?: InputMaybe<Array<InputMaybe<PostTypeEventModelFilter>>>
  id?: InputMaybe<ItemIdFilter>
}

export type PostTypeEventRecord = RecordInterface & {
  __typename: 'PostTypeEventRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
}

export type PostTypeEventRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type PostsCarouselArticleRecord = RecordInterface & {
  __typename: 'PostsCarouselArticleRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  categories: Maybe<Scalars['JsonField']['output']>
  coverAsset: Maybe<FileField>
  coverAssetMobile: Maybe<FileField>
  id: Scalars['ItemId']['output']
  overlayColor: Maybe<ColorField>
  post: Maybe<PostRecord>
  title: Maybe<Scalars['String']['output']>
}

export type PostsCarouselArticleRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type PostsCarouselCaseStudyModelContentField = {
  __typename: 'PostsCarouselCaseStudyModelContentField'
  blocks: Array<Scalars['String']['output']>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export type PostsCarouselCaseStudyRecord = RecordInterface & {
  __typename: 'PostsCarouselCaseStudyRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  assets: Array<GridAssetsRowRecord>
  callToAction: Maybe<Scalars['String']['output']>
  caseStudyPopupTitle: Maybe<Scalars['String']['output']>
  caseStudyPost: Maybe<PostRecord>
  categories: Maybe<Scalars['JsonField']['output']>
  content: Maybe<PostsCarouselCaseStudyModelContentField>
  coverAsset: Maybe<FileField>
  coverAssetMobile: Maybe<FileField>
  highlight: Maybe<Scalars['String']['output']>
  id: Scalars['ItemId']['output']
  logo: Maybe<FileField>
  overlayColor: Maybe<ColorField>
  title: Maybe<Scalars['String']['output']>
}

export type PostsCarouselCaseStudyRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type PostsCarouselCaseStudyRecordCaseStudyPopupTitleArgs = {
  markdown?: InputMaybe<Scalars['Boolean']['input']>
}

export type PublishedAtFilter = {
  eq?: InputMaybe<Scalars['DateTime']['input']>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  gt?: InputMaybe<Scalars['DateTime']['input']>
  gte?: InputMaybe<Scalars['DateTime']['input']>
  lt?: InputMaybe<Scalars['DateTime']['input']>
  lte?: InputMaybe<Scalars['DateTime']['input']>
  neq?: InputMaybe<Scalars['DateTime']['input']>
}

export type Query = {
  __typename: 'Query'
  _allCompaniesMeta: CollectionMetadata
  _allPagesMeta: CollectionMetadata
  _allPeopleMeta: CollectionMetadata
  _allPostsMeta: CollectionMetadata
  _allSchemaMigrationsMeta: CollectionMetadata
  _allUploadsMeta: CollectionMetadata
  _site: Site
  allCompanies: Array<CompanyRecord>
  allPages: Array<PageRecord>
  allPeople: Array<PersonRecord>
  allPosts: Array<PostRecord>
  allSchemaMigrations: Array<SchemaMigrationRecord>
  allUploads: Array<FileField>
  company: Maybe<CompanyRecord>
  global: Maybe<GlobalRecord>
  homePage: Maybe<HomePageRecord>
  page: Maybe<PageRecord>
  person: Maybe<PersonRecord>
  post: Maybe<PostRecord>
  schemaMigration: Maybe<SchemaMigrationRecord>
  upload: Maybe<FileField>
}

export type QueryAllCompaniesMetaArgs = {
  filter?: InputMaybe<CompanyModelFilter>
  locale?: InputMaybe<SiteLocale>
}

export type QueryAllPagesMetaArgs = {
  filter?: InputMaybe<PageModelFilter>
  locale?: InputMaybe<SiteLocale>
}

export type QueryAllPeopleMetaArgs = {
  filter?: InputMaybe<PersonModelFilter>
  locale?: InputMaybe<SiteLocale>
}

export type QueryAllPostsMetaArgs = {
  filter?: InputMaybe<PostModelFilter>
  locale?: InputMaybe<SiteLocale>
}

export type QueryAllSchemaMigrationsMetaArgs = {
  filter?: InputMaybe<SchemaMigrationModelFilter>
  locale?: InputMaybe<SiteLocale>
}

export type QueryAllUploadsMetaArgs = {
  filter?: InputMaybe<UploadFilter>
  locale?: InputMaybe<SiteLocale>
}

export type QuerySiteArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type QueryAllCompaniesArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<CompanyModelFilter>
  first?: InputMaybe<Scalars['IntType']['input']>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<CompanyModelOrderBy>>>
  skip?: InputMaybe<Scalars['IntType']['input']>
}

export type QueryAllPagesArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<PageModelFilter>
  first?: InputMaybe<Scalars['IntType']['input']>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<PageModelOrderBy>>>
  skip?: InputMaybe<Scalars['IntType']['input']>
}

export type QueryAllPeopleArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<PersonModelFilter>
  first?: InputMaybe<Scalars['IntType']['input']>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<PersonModelOrderBy>>>
  skip?: InputMaybe<Scalars['IntType']['input']>
}

export type QueryAllPostsArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<PostModelFilter>
  first?: InputMaybe<Scalars['IntType']['input']>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<PostModelOrderBy>>>
  skip?: InputMaybe<Scalars['IntType']['input']>
}

export type QueryAllSchemaMigrationsArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<SchemaMigrationModelFilter>
  first?: InputMaybe<Scalars['IntType']['input']>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<SchemaMigrationModelOrderBy>>>
  skip?: InputMaybe<Scalars['IntType']['input']>
}

export type QueryAllUploadsArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<UploadFilter>
  first?: InputMaybe<Scalars['IntType']['input']>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<UploadOrderBy>>>
  skip?: InputMaybe<Scalars['IntType']['input']>
}

export type QueryCompanyArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<CompanyModelFilter>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<CompanyModelOrderBy>>>
}

export type QueryGlobalArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type QueryHomePageArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type QueryPageArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<PageModelFilter>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<PageModelOrderBy>>>
}

export type QueryPersonArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<PersonModelFilter>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<PersonModelOrderBy>>>
}

export type QueryPostArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<PostModelFilter>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<PostModelOrderBy>>>
}

export type QuerySchemaMigrationArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<SchemaMigrationModelFilter>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<SchemaMigrationModelOrderBy>>>
}

export type QueryUploadArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  filter?: InputMaybe<UploadFilter>
  locale?: InputMaybe<SiteLocale>
  orderBy?: InputMaybe<Array<InputMaybe<UploadOrderBy>>>
}

export type RecordInterface = {
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
}

export type RecordInterfaceSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type ResolutionFilter = {
  eq?: InputMaybe<ResolutionType>
  in?: InputMaybe<Array<InputMaybe<ResolutionType>>>
  neq?: InputMaybe<ResolutionType>
  notIn?: InputMaybe<Array<InputMaybe<ResolutionType>>>
}

export const ResolutionType = {
  icon: 'icon',
  large: 'large',
  medium: 'medium',
  small: 'small'
} as const

export type ResolutionType =
  (typeof ResolutionType)[keyof typeof ResolutionType]
export type ResponsiveImage = {
  __typename: 'ResponsiveImage'
  alt: Maybe<Scalars['String']['output']>
  aspectRatio: Scalars['FloatType']['output']
  base64: Maybe<Scalars['String']['output']>
  bgColor: Maybe<Scalars['String']['output']>
  height: Scalars['IntType']['output']
  sizes: Scalars['String']['output']
  src: Scalars['String']['output']
  srcSet: Scalars['String']['output']
  title: Maybe<Scalars['String']['output']>
  webpSrcSet: Scalars['String']['output']
  width: Scalars['IntType']['output']
}

export type SchemaMigrationModelFilter = {
  AND?: InputMaybe<Array<InputMaybe<SchemaMigrationModelFilter>>>
  OR?: InputMaybe<Array<InputMaybe<SchemaMigrationModelFilter>>>
  _createdAt?: InputMaybe<CreatedAtFilter>
  _firstPublishedAt?: InputMaybe<PublishedAtFilter>
  _isValid?: InputMaybe<BooleanFilter>
  _publicationScheduledAt?: InputMaybe<PublishedAtFilter>
  _publishedAt?: InputMaybe<PublishedAtFilter>
  _status?: InputMaybe<StatusFilter>
  _unpublishingScheduledAt?: InputMaybe<PublishedAtFilter>
  _updatedAt?: InputMaybe<UpdatedAtFilter>
  id?: InputMaybe<ItemIdFilter>
  name?: InputMaybe<StringFilter>
}

export const SchemaMigrationModelOrderBy = {
  _createdAt_ASC: '_createdAt_ASC',
  _createdAt_DESC: '_createdAt_DESC',
  _firstPublishedAt_ASC: '_firstPublishedAt_ASC',
  _firstPublishedAt_DESC: '_firstPublishedAt_DESC',
  _isValid_ASC: '_isValid_ASC',
  _isValid_DESC: '_isValid_DESC',
  _publicationScheduledAt_ASC: '_publicationScheduledAt_ASC',
  _publicationScheduledAt_DESC: '_publicationScheduledAt_DESC',
  _publishedAt_ASC: '_publishedAt_ASC',
  _publishedAt_DESC: '_publishedAt_DESC',
  _status_ASC: '_status_ASC',
  _status_DESC: '_status_DESC',
  _unpublishingScheduledAt_ASC: '_unpublishingScheduledAt_ASC',
  _unpublishingScheduledAt_DESC: '_unpublishingScheduledAt_DESC',
  _updatedAt_ASC: '_updatedAt_ASC',
  _updatedAt_DESC: '_updatedAt_DESC',
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  name_ASC: 'name_ASC',
  name_DESC: 'name_DESC'
} as const

export type SchemaMigrationModelOrderBy =
  (typeof SchemaMigrationModelOrderBy)[keyof typeof SchemaMigrationModelOrderBy]
export type SchemaMigrationRecord = RecordInterface & {
  __typename: 'SchemaMigrationRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
  name: Scalars['String']['output']
}

export type SchemaMigrationRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type SectionAboutModelContentField = {
  __typename: 'SectionAboutModelContentField'
  blocks: Array<SectionAboutTwoColumnContentRecord>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export type SectionAboutRecord = RecordInterface & {
  __typename: 'SectionAboutRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  content: Maybe<SectionAboutModelContentField>
  id: Scalars['ItemId']['output']
  tags: Maybe<Scalars['JsonField']['output']>
  title: Maybe<Scalars['String']['output']>
}

export type SectionAboutRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type SectionAboutTwoColumnContentModelLeftColumnContentField = {
  __typename: 'SectionAboutTwoColumnContentModelLeftColumnContentField'
  blocks: Array<Scalars['String']['output']>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export type SectionAboutTwoColumnContentModelRightColumnContentField = {
  __typename: 'SectionAboutTwoColumnContentModelRightColumnContentField'
  blocks: Array<Scalars['String']['output']>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export type SectionAboutTwoColumnContentRecord = RecordInterface & {
  __typename: 'SectionAboutTwoColumnContentRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
  leftColumnContent: Maybe<SectionAboutTwoColumnContentModelLeftColumnContentField>
  rightColumnContent: Maybe<SectionAboutTwoColumnContentModelRightColumnContentField>
}

export type SectionAboutTwoColumnContentRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type SectionCaseStudyModelContentField = {
  __typename: 'SectionCaseStudyModelContentField'
  blocks: Array<Scalars['String']['output']>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export type SectionCaseStudyRecord = RecordInterface & {
  __typename: 'SectionCaseStudyRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  assets: Array<GridAssetsRowRecord>
  callToAction: Maybe<Scalars['String']['output']>
  caseStudyPopupTitle: Maybe<Scalars['String']['output']>
  caseStudyPost: PostRecord
  content: Maybe<SectionCaseStudyModelContentField>
  coverAsset: Maybe<FileField>
  coverAssetMobile: Maybe<FileField>
  highlight: Maybe<Scalars['String']['output']>
  id: Scalars['ItemId']['output']
  overlayColor: Maybe<ColorField>
  title: Maybe<Scalars['String']['output']>
}

export type SectionCaseStudyRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type SectionCaseStudyRecordCaseStudyPopupTitleArgs = {
  markdown?: InputMaybe<Scalars['Boolean']['input']>
}

export type SectionHeroModelContentField = {
  __typename: 'SectionHeroModelContentField'
  blocks: Array<Scalars['String']['output']>
  inlineBlocks: Array<Scalars['String']['output']>
  links: Array<Scalars['String']['output']>
  value: Scalars['JsonField']['output']
}

export type SectionHeroRecord = RecordInterface & {
  __typename: 'SectionHeroRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  caseStudies: Array<HeroCaseStudyRecord>
  content: Maybe<SectionHeroModelContentField>
  coverAsset: Maybe<FileField>
  coverAssetMobile: Maybe<FileField>
  id: Scalars['ItemId']['output']
  tags: Maybe<Scalars['JsonField']['output']>
}

export type SectionHeroRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type SectionPostsCarouselModelPostsField =
  | PostsCarouselArticleRecord
  | PostsCarouselCaseStudyRecord

export type SectionPostsCarouselRecord = RecordInterface & {
  __typename: 'SectionPostsCarouselRecord'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _firstPublishedAt: Scalars['DateTime']['output']
  _isValid: Scalars['BooleanType']['output']
  _modelApiKey: Scalars['String']['output']
  _publicationScheduledAt: Maybe<Scalars['DateTime']['output']>
  _publishedAt: Scalars['DateTime']['output']
  _seoMetaTags: Array<Tag>
  _status: ItemStatus
  _unpublishingScheduledAt: Maybe<Scalars['DateTime']['output']>
  _updatedAt: Scalars['DateTime']['output']
  id: Scalars['ItemId']['output']
  posts: Array<SectionPostsCarouselModelPostsField>
}

export type SectionPostsCarouselRecordSeoMetaTagsArgs = {
  locale?: InputMaybe<SiteLocale>
}

export type SeoField = {
  __typename: 'SeoField'
  description: Maybe<Scalars['String']['output']>
  image: Maybe<FileField>
  noIndex: Maybe<Scalars['BooleanType']['output']>
  title: Maybe<Scalars['String']['output']>
  twitterCard: Maybe<Scalars['String']['output']>
}

export type SeoFilter = {
  exists?: InputMaybe<Scalars['BooleanType']['input']>
}

export type Site = {
  __typename: 'Site'
  favicon: Maybe<FileField>
  faviconMetaTags: Array<Tag>
  globalSeo: Maybe<GlobalSeoField>
  locales: Array<SiteLocale>
  noIndex: Maybe<Scalars['BooleanType']['output']>
}

export type SiteFaviconMetaTagsArgs = {
  variants?: InputMaybe<Array<InputMaybe<FaviconType>>>
}

export type SiteGlobalSeoArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export const SiteLocale = {
  en: 'en'
} as const

export type SiteLocale = (typeof SiteLocale)[keyof typeof SiteLocale]
export type SlugFilter = {
  eq?: InputMaybe<Scalars['String']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  neq?: InputMaybe<Scalars['String']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
}

export type StatusFilter = {
  eq?: InputMaybe<ItemStatus>
  in?: InputMaybe<Array<InputMaybe<ItemStatus>>>
  neq?: InputMaybe<ItemStatus>
  notIn?: InputMaybe<Array<InputMaybe<ItemStatus>>>
}

export type StringFilter = {
  eq?: InputMaybe<Scalars['String']['input']>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  isBlank?: InputMaybe<Scalars['BooleanType']['input']>
  isPresent?: InputMaybe<Scalars['BooleanType']['input']>
  matches?: InputMaybe<StringMatchesFilter>
  neq?: InputMaybe<Scalars['String']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export type StringMatchesFilter = {
  caseSensitive?: InputMaybe<Scalars['BooleanType']['input']>
  pattern: Scalars['String']['input']
  regexp?: InputMaybe<Scalars['BooleanType']['input']>
}

export type StructuredTextFilter = {
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  isBlank?: InputMaybe<Scalars['BooleanType']['input']>
  isPresent?: InputMaybe<Scalars['BooleanType']['input']>
  matches?: InputMaybe<StringMatchesFilter>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export type Tag = {
  __typename: 'Tag'
  attributes: Maybe<Scalars['MetaTagAttributes']['output']>
  content: Maybe<Scalars['String']['output']>
  tag: Scalars['String']['output']
}

export type TextFilter = {
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  isBlank?: InputMaybe<Scalars['BooleanType']['input']>
  isPresent?: InputMaybe<Scalars['BooleanType']['input']>
  matches?: InputMaybe<StringMatchesFilter>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export type TypeFilter = {
  eq?: InputMaybe<UploadType>
  in?: InputMaybe<Array<InputMaybe<UploadType>>>
  neq?: InputMaybe<UploadType>
  notIn?: InputMaybe<Array<InputMaybe<UploadType>>>
}

export type UpdatedAtFilter = {
  eq?: InputMaybe<Scalars['DateTime']['input']>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  gt?: InputMaybe<Scalars['DateTime']['input']>
  gte?: InputMaybe<Scalars['DateTime']['input']>
  lt?: InputMaybe<Scalars['DateTime']['input']>
  lte?: InputMaybe<Scalars['DateTime']['input']>
  neq?: InputMaybe<Scalars['DateTime']['input']>
}

export type UploadAltFilter = {
  eq?: InputMaybe<Scalars['String']['input']>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  matches?: InputMaybe<StringMatchesFilter>
  neq?: InputMaybe<Scalars['String']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export type UploadAuthorFilter = {
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  matches?: InputMaybe<StringMatchesFilter>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export type UploadBasenameFilter = {
  matches?: InputMaybe<StringMatchesFilter>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export type UploadColorsFilter = {
  allIn?: InputMaybe<Array<InputMaybe<ColorBucketType>>>
  anyIn?: InputMaybe<Array<InputMaybe<ColorBucketType>>>
  contains?: InputMaybe<ColorBucketType>
  eq?: InputMaybe<Array<InputMaybe<ColorBucketType>>>
  notIn?: InputMaybe<Array<InputMaybe<ColorBucketType>>>
}

export type UploadCopyrightFilter = {
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  matches?: InputMaybe<StringMatchesFilter>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export type UploadCreatedAtFilter = {
  eq?: InputMaybe<Scalars['DateTime']['input']>
  gt?: InputMaybe<Scalars['DateTime']['input']>
  gte?: InputMaybe<Scalars['DateTime']['input']>
  lt?: InputMaybe<Scalars['DateTime']['input']>
  lte?: InputMaybe<Scalars['DateTime']['input']>
  neq?: InputMaybe<Scalars['DateTime']['input']>
}

export type UploadFilenameFilter = {
  matches?: InputMaybe<StringMatchesFilter>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export type UploadFilter = {
  AND?: InputMaybe<Array<InputMaybe<UploadFilter>>>
  OR?: InputMaybe<Array<InputMaybe<UploadFilter>>>
  _createdAt?: InputMaybe<UploadCreatedAtFilter>
  _updatedAt?: InputMaybe<UploadUpdatedAtFilter>
  alt?: InputMaybe<UploadAltFilter>
  author?: InputMaybe<UploadAuthorFilter>
  basename?: InputMaybe<UploadBasenameFilter>
  colors?: InputMaybe<UploadColorsFilter>
  copyright?: InputMaybe<UploadCopyrightFilter>
  filename?: InputMaybe<UploadFilenameFilter>
  format?: InputMaybe<UploadFormatFilter>
  height?: InputMaybe<UploadHeightFilter>
  id?: InputMaybe<UploadIdFilter>
  inUse?: InputMaybe<InUseFilter>
  md5?: InputMaybe<UploadMd5Filter>
  mimeType?: InputMaybe<UploadMimeTypeFilter>
  notes?: InputMaybe<UploadNotesFilter>
  orientation?: InputMaybe<OrientationFilter>
  resolution?: InputMaybe<ResolutionFilter>
  size?: InputMaybe<UploadSizeFilter>
  smartTags?: InputMaybe<UploadTagsFilter>
  tags?: InputMaybe<UploadTagsFilter>
  title?: InputMaybe<UploadTitleFilter>
  type?: InputMaybe<TypeFilter>
  width?: InputMaybe<UploadWidthFilter>
}

export type UploadFormatFilter = {
  eq?: InputMaybe<Scalars['String']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  neq?: InputMaybe<Scalars['String']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
}

export type UploadHeightFilter = {
  eq?: InputMaybe<Scalars['IntType']['input']>
  gt?: InputMaybe<Scalars['IntType']['input']>
  gte?: InputMaybe<Scalars['IntType']['input']>
  lt?: InputMaybe<Scalars['IntType']['input']>
  lte?: InputMaybe<Scalars['IntType']['input']>
  neq?: InputMaybe<Scalars['IntType']['input']>
}

export type UploadIdFilter = {
  eq?: InputMaybe<Scalars['UploadId']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['UploadId']['input']>>>
  neq?: InputMaybe<Scalars['UploadId']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['UploadId']['input']>>>
}

export type UploadMd5Filter = {
  eq?: InputMaybe<Scalars['String']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  neq?: InputMaybe<Scalars['String']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
}

export type UploadMimeTypeFilter = {
  eq?: InputMaybe<Scalars['String']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  matches?: InputMaybe<StringMatchesFilter>
  neq?: InputMaybe<Scalars['String']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export type UploadNotesFilter = {
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  matches?: InputMaybe<StringMatchesFilter>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export const UploadOrderBy = {
  _createdAt_ASC: '_createdAt_ASC',
  _createdAt_DESC: '_createdAt_DESC',
  _updatedAt_ASC: '_updatedAt_ASC',
  _updatedAt_DESC: '_updatedAt_DESC',
  basename_ASC: 'basename_ASC',
  basename_DESC: 'basename_DESC',
  filename_ASC: 'filename_ASC',
  filename_DESC: 'filename_DESC',
  format_ASC: 'format_ASC',
  format_DESC: 'format_DESC',
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  mimeType_ASC: 'mimeType_ASC',
  mimeType_DESC: 'mimeType_DESC',
  resolution_ASC: 'resolution_ASC',
  resolution_DESC: 'resolution_DESC',
  size_ASC: 'size_ASC',
  size_DESC: 'size_DESC'
} as const

export type UploadOrderBy = (typeof UploadOrderBy)[keyof typeof UploadOrderBy]
export const UploadOrientation = {
  landscape: 'landscape',
  portrait: 'portrait',
  square: 'square'
} as const

export type UploadOrientation =
  (typeof UploadOrientation)[keyof typeof UploadOrientation]
export type UploadSizeFilter = {
  eq?: InputMaybe<Scalars['IntType']['input']>
  gt?: InputMaybe<Scalars['IntType']['input']>
  gte?: InputMaybe<Scalars['IntType']['input']>
  lt?: InputMaybe<Scalars['IntType']['input']>
  lte?: InputMaybe<Scalars['IntType']['input']>
  neq?: InputMaybe<Scalars['IntType']['input']>
}

export type UploadTagsFilter = {
  allIn?: InputMaybe<Array<Scalars['String']['input']>>
  anyIn?: InputMaybe<Array<Scalars['String']['input']>>
  contains?: InputMaybe<Scalars['String']['input']>
  eq?: InputMaybe<Array<Scalars['String']['input']>>
  notIn?: InputMaybe<Array<Scalars['String']['input']>>
}

export type UploadTitleFilter = {
  eq?: InputMaybe<Scalars['String']['input']>
  exists?: InputMaybe<Scalars['BooleanType']['input']>
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  matches?: InputMaybe<StringMatchesFilter>
  neq?: InputMaybe<Scalars['String']['input']>
  notIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>
  notMatches?: InputMaybe<StringMatchesFilter>
}

export const UploadType = {
  archive: 'archive',
  audio: 'audio',
  image: 'image',
  pdfdocument: 'pdfdocument',
  presentation: 'presentation',
  richtext: 'richtext',
  spreadsheet: 'spreadsheet',
  video: 'video'
} as const

export type UploadType = (typeof UploadType)[keyof typeof UploadType]
export type UploadUpdatedAtFilter = {
  eq?: InputMaybe<Scalars['DateTime']['input']>
  gt?: InputMaybe<Scalars['DateTime']['input']>
  gte?: InputMaybe<Scalars['DateTime']['input']>
  lt?: InputMaybe<Scalars['DateTime']['input']>
  lte?: InputMaybe<Scalars['DateTime']['input']>
  neq?: InputMaybe<Scalars['DateTime']['input']>
}

export type UploadVideoField = {
  __typename: 'UploadVideoField'
  alt: Maybe<Scalars['String']['output']>
  blurUpThumb: Maybe<Scalars['String']['output']>
  blurhash: Maybe<Scalars['String']['output']>
  duration: Maybe<Scalars['Int']['output']>
  framerate: Maybe<Scalars['Int']['output']>
  height: Scalars['IntType']['output']
  mp4Url: Maybe<Scalars['String']['output']>
  muxAssetId: Scalars['String']['output']
  muxPlaybackId: Scalars['String']['output']
  streamingUrl: Scalars['String']['output']
  thumbhash: Maybe<Scalars['String']['output']>
  thumbnailUrl: Scalars['String']['output']
  title: Maybe<Scalars['String']['output']>
  width: Scalars['IntType']['output']
}

export type UploadVideoFieldAltArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type UploadVideoFieldBlurUpThumbArgs = {
  imgixParams?: InputMaybe<ImgixParams>
  punch?: Scalars['Float']['input']
  quality?: Scalars['Int']['input']
  size?: Scalars['Int']['input']
}

export type UploadVideoFieldMp4UrlArgs = {
  exactRes?: InputMaybe<VideoMp4Res>
  res?: InputMaybe<VideoMp4Res>
}

export type UploadVideoFieldThumbnailUrlArgs = {
  format?: InputMaybe<MuxThumbnailFormatType>
}

export type UploadVideoFieldTitleArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type UploadWidthFilter = {
  eq?: InputMaybe<Scalars['IntType']['input']>
  gt?: InputMaybe<Scalars['IntType']['input']>
  gte?: InputMaybe<Scalars['IntType']['input']>
  lt?: InputMaybe<Scalars['IntType']['input']>
  lte?: InputMaybe<Scalars['IntType']['input']>
  neq?: InputMaybe<Scalars['IntType']['input']>
}

export type VideoFileField = FileFieldInterface & {
  __typename: 'VideoFileField'
  _createdAt: Scalars['DateTime']['output']
  _editingUrl: Maybe<Scalars['String']['output']>
  _updatedAt: Scalars['DateTime']['output']
  alt: Maybe<Scalars['String']['output']>
  author: Maybe<Scalars['String']['output']>
  basename: Scalars['String']['output']
  blurUpThumb: Maybe<Scalars['String']['output']>
  blurhash: Maybe<Scalars['String']['output']>
  colors: Array<ColorField>
  copyright: Maybe<Scalars['String']['output']>
  customData: Scalars['CustomData']['output']
  exifInfo: Scalars['CustomData']['output']
  filename: Scalars['String']['output']
  focalPoint: Maybe<FocalPoint>
  format: Scalars['String']['output']
  height: Scalars['IntType']['output']
  id: Scalars['UploadId']['output']
  md5: Scalars['String']['output']
  mimeType: Scalars['String']['output']
  notes: Maybe<Scalars['String']['output']>
  responsiveImage: Maybe<ResponsiveImage>
  size: Scalars['IntType']['output']
  smartTags: Array<Scalars['String']['output']>
  tags: Array<Scalars['String']['output']>
  thumbhash: Maybe<Scalars['String']['output']>
  title: Maybe<Scalars['String']['output']>
  url: Scalars['String']['output']
  video: UploadVideoField
  width: Scalars['IntType']['output']
}

export type VideoFileFieldAltArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type VideoFileFieldBlurUpThumbArgs = {
  imgixParams?: InputMaybe<ImgixParams>
  punch?: Scalars['Float']['input']
  quality?: Scalars['Int']['input']
  size?: Scalars['Int']['input']
}

export type VideoFileFieldCustomDataArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type VideoFileFieldFocalPointArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type VideoFileFieldResponsiveImageArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  imgixParams?: InputMaybe<ImgixParams>
  locale?: InputMaybe<SiteLocale>
  sizes?: InputMaybe<Scalars['String']['input']>
}

export type VideoFileFieldTitleArgs = {
  fallbackLocales?: InputMaybe<Array<SiteLocale>>
  locale?: InputMaybe<SiteLocale>
}

export type VideoFileFieldUrlArgs = {
  imgixParams?: InputMaybe<ImgixParams>
}

export const VideoMp4Res = {
  high: 'high',
  low: 'low',
  medium: 'medium'
} as const

export type VideoMp4Res = (typeof VideoMp4Res)[keyof typeof VideoMp4Res]
export type FocalPoint = {
  __typename: 'focalPoint'
  x: Scalars['FloatType']['output']
  y: Scalars['FloatType']['output']
}
